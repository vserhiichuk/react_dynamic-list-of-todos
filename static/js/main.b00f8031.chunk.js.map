{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","helpers/helpers.ts","index.tsx"],"names":["TodoList","React","memo","todos","onSelectedUser","onSelectedTodo","className","map","todo","id","completed","title","cn","type","onClick","TodoFilter","value","handleInputQuery","onSelectedCategory","onChange","event","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","selectedTodo","removeModal","useState","user","setUser","userId","useEffect","getUser","href","email","name","App","setTodos","setSelectedTodo","selectedCategory","setSelectedCategory","query","setQuery","isLoading","setIsLoading","finally","preparedTodos","useMemo","selected","filteredTodos","filterTodosByQuery","toLowerCase","includes","filter","getPreparedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b00f8031.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n  onSelectedUser: (userId: Todo) => void,\n  onSelectedTodo: Todo | null,\n}\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  onSelectedUser,\n  onSelectedTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => {\n          const { id, completed, title } = todo;\n\n          return (\n            <tr\n              key={id}\n              data-cy=\"todo\"\n            >\n              <td className=\"is-vcentered\">\n                {id}\n              </td>\n\n              {completed ? (\n                <td className=\"is-vcentered\">\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </td>\n              ) : (\n                <td className=\"is-vcentered\" />\n              )}\n              <td className=\"is-vcentered is-expanded\">\n                <p className={cn({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    onSelectedUser(todo);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className={cn('far', {\n                      'fa-eye': id !== onSelectedTodo?.id,\n                      'fa-eye-slash': id === onSelectedTodo?.id,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n});\n","interface Props {\n  value: string,\n  handleInputQuery: (value: string) => void,\n  onSelectedCategory: (category: string) => void,\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  value,\n  handleInputQuery,\n  onSelectedCategory,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          onChange={(event) => onSelectedCategory(event.target.value)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={value}\n        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n          handleInputQuery(event.target.value);\n        }}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {value && (\n          // eslint-disable-next-line jsx-a11y/control-has-associated-label\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => handleInputQuery('')}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  selectedTodo: Todo,\n  removeModal: (value: null) => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({ selectedTodo, removeModal }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const {\n    title,\n    id,\n    userId,\n    completed,\n  } = selectedTodo;\n\n  useEffect(() => {\n    getUser(userId)\n      .then(setUser);\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => removeModal(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className={cn({\n                'has-text-danger': !completed,\n                'has-text-success': completed,\n              })}\n              >\n                {completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getPreparedTodos } from './helpers/helpers';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [query, setQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const preparedTodos = useMemo(() => {\n    return getPreparedTodos(todos, query, selectedCategory);\n  }, [todos, query, selectedCategory]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                value={query}\n                handleInputQuery={setQuery}\n                onSelectedCategory={setSelectedCategory}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={preparedTodos}\n                    onSelectedUser={setSelectedTodo}\n                    onSelectedTodo={selectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          removeModal={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport function getPreparedTodos(\n  todos: Todo[],\n  query: string,\n  selected: string,\n) {\n  let filteredTodos = todos;\n  const filterTodosByQuery = (title: string) => {\n    return title.toLowerCase().includes(query.toLowerCase());\n  };\n\n  if (query) {\n    filteredTodos = filteredTodos\n      .filter(({ title }) => filterTodosByQuery(title));\n  }\n\n  if (selected) {\n    switch (selected) {\n      case 'active':\n        filteredTodos = filteredTodos.filter(({ completed }) => !completed);\n        break;\n\n      case 'completed':\n        filteredTodos = filteredTodos.filter(({ completed }) => completed);\n        break;\n\n      default:\n        filteredTodos = filteredTodos\n          .filter(({ title }) => filterTodosByQuery(title));\n    }\n  }\n\n  return filteredTodos;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}