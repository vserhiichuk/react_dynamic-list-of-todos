{"version":3,"sources":["types/FilterType.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","helpers/helpersFunctions.ts","App.tsx","index.tsx"],"names":["FilterType","TodoItem","todo","onTodoSelect","selectedTodo","id","completed","title","className","cn","type","onClick","TodoList","React","memo","todos","map","TodoFilter","queryParam","onInputChange","onSelectCategory","onChange","event","target","value","Object","entries","key","filterType","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","onCloseModal","useState","isLoading","setIsLoading","user","setUser","userId","useEffect","getUser","catch","error","console","finally","href","email","name","getPreparedTodos","query","filteredTodos","filter","toLowerCase","includes","filterTodosByQuery","Active","Completed","App","setTodos","setSelectedTodo","All","selectedCategory","setSelectedCategory","setQuery","preparedTodos","useMemo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.55f66125.chunk.js","sourcesContent":["export enum FilterType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo;\n  onTodoSelect: (userId: Todo) => void,\n  selectedTodo: Todo | null,\n}\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  onTodoSelect,\n  selectedTodo,\n}) => {\n  const { id, completed, title } = todo;\n\n  return (\n    <tr\n      key={id}\n      data-cy=\"todo\"\n    >\n      <td className=\"is-vcentered\">\n        {id}\n      </td>\n\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p className={cn({\n          'has-text-success': completed,\n          'has-text-danger': !completed,\n        })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => {\n            onTodoSelect(todo);\n          }}\n        >\n          <span className=\"icon\">\n            <i className={cn('far', {\n              'fa-eye': id !== selectedTodo?.id,\n              'fa-eye-slash': id === selectedTodo?.id,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\n\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ninterface Props {\n  todos: Todo[],\n  onTodoSelect: (userId: Todo) => void,\n  selectedTodo: Todo | null,\n}\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  onTodoSelect,\n  selectedTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => (\n          <TodoItem\n            todo={todo}\n            onTodoSelect={onTodoSelect}\n            selectedTodo={selectedTodo}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n});\n","import { FilterType } from '../../types/FilterType';\n\ninterface Props {\n  queryParam: string,\n  onInputChange: (value: string) => void,\n  onSelectCategory: (category: FilterType) => void,\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  queryParam,\n  onInputChange,\n  onSelectCategory,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          onChange={(event) => (\n            onSelectCategory(event.target.value as FilterType)\n          )}\n        >\n          {Object.entries(FilterType).map(([key, filterType]) => (\n            <option key={filterType} value={filterType}>\n              {key}\n            </option>\n          ))}\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={queryParam}\n        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n          onInputChange(event.target.value);\n        }}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {queryParam && (\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            aria-label=\"Button icon\"\n            onClick={() => onInputChange('')}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  selectedTodo: Todo,\n  onCloseModal: (value: null) => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({ selectedTodo, onCloseModal }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  const {\n    title,\n    id,\n    userId,\n    completed,\n  } = selectedTodo;\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getUser(userId)\n      .then(setUser)\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        console.error('Error loading user:', error);\n      })\n      .finally(() => setIsLoading(false));\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              aria-label=\"Button close modal\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onCloseModal(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={cn({\n                'has-text-danger': !completed,\n                'has-text-success': completed,\n              })}\n              >\n                {completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { FilterType } from '../types/FilterType';\nimport { Todo } from '../types/Todo';\n\nexport function getPreparedTodos(\n  todos: Todo[],\n  query: string,\n  filterType: FilterType,\n) {\n  let filteredTodos = todos;\n  const filterTodosByQuery = (title: string) => {\n    return title.toLowerCase().includes(query.toLowerCase());\n  };\n\n  if (query) {\n    filteredTodos = filteredTodos\n      .filter(({ title }) => filterTodosByQuery(title));\n  }\n\n  if (filterType) {\n    switch (filterType) {\n      case FilterType.Active:\n        filteredTodos = filteredTodos.filter(({ completed }) => !completed);\n        break;\n\n      case FilterType.Completed:\n        filteredTodos = filteredTodos.filter(({ completed }) => completed);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return filteredTodos;\n}\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getPreparedTodos } from './helpers/helpersFunctions';\nimport { FilterType } from './types/FilterType';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [selectedCategory, setSelectedCategory] = useState<FilterType>(FilterType.All);\n  const [query, setQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        console.error('Error loading tasks:', error);\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const preparedTodos = useMemo(() => {\n    return getPreparedTodos(todos, query, selectedCategory);\n  }, [todos, query, selectedCategory]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                queryParam={query}\n                onInputChange={setQuery}\n                onSelectCategory={setSelectedCategory}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={preparedTodos}\n                    onTodoSelect={setSelectedTodo}\n                    selectedTodo={selectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onCloseModal={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}